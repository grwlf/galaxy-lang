# coding: utf-8

"""
    ICFP Contest 2020 API

    See <a href='https://github.com/icfpcontest2020/aliens-proxy-protocol' target='_blank'>https://github.com/icfpcontest2020/aliens-proxy-protocol<a/>  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SubmissionDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'submission_id': 'int',
        'platform': 'str',
        'created_at': 'datetime',
        'active': 'bool',
        'commit_hash': 'str',
        'commit_message': 'str',
        'branch_name': 'str',
        'status': 'SubmissionStatus',
        'build_log_key': 'str',
        'test_log_key': 'str'
    }

    attribute_map = {
        'submission_id': 'submissionId',
        'platform': 'platform',
        'created_at': 'createdAt',
        'active': 'active',
        'commit_hash': 'commitHash',
        'commit_message': 'commitMessage',
        'branch_name': 'branchName',
        'status': 'status',
        'build_log_key': 'buildLogKey',
        'test_log_key': 'testLogKey'
    }

    def __init__(self, submission_id=None, platform=None, created_at=None, active=None, commit_hash=None, commit_message=None, branch_name=None, status=None, build_log_key=None, test_log_key=None, local_vars_configuration=None):  # noqa: E501
        """SubmissionDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._submission_id = None
        self._platform = None
        self._created_at = None
        self._active = None
        self._commit_hash = None
        self._commit_message = None
        self._branch_name = None
        self._status = None
        self._build_log_key = None
        self._test_log_key = None
        self.discriminator = None

        if submission_id is not None:
            self.submission_id = submission_id
        self.platform = platform
        if created_at is not None:
            self.created_at = created_at
        if active is not None:
            self.active = active
        self.commit_hash = commit_hash
        self.commit_message = commit_message
        self.branch_name = branch_name
        if status is not None:
            self.status = status
        self.build_log_key = build_log_key
        self.test_log_key = test_log_key

    @property
    def submission_id(self):
        """Gets the submission_id of this SubmissionDto.  # noqa: E501


        :return: The submission_id of this SubmissionDto.  # noqa: E501
        :rtype: int
        """
        return self._submission_id

    @submission_id.setter
    def submission_id(self, submission_id):
        """Sets the submission_id of this SubmissionDto.


        :param submission_id: The submission_id of this SubmissionDto.  # noqa: E501
        :type: int
        """

        self._submission_id = submission_id

    @property
    def platform(self):
        """Gets the platform of this SubmissionDto.  # noqa: E501


        :return: The platform of this SubmissionDto.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this SubmissionDto.


        :param platform: The platform of this SubmissionDto.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def created_at(self):
        """Gets the created_at of this SubmissionDto.  # noqa: E501


        :return: The created_at of this SubmissionDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SubmissionDto.


        :param created_at: The created_at of this SubmissionDto.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def active(self):
        """Gets the active of this SubmissionDto.  # noqa: E501


        :return: The active of this SubmissionDto.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this SubmissionDto.


        :param active: The active of this SubmissionDto.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def commit_hash(self):
        """Gets the commit_hash of this SubmissionDto.  # noqa: E501


        :return: The commit_hash of this SubmissionDto.  # noqa: E501
        :rtype: str
        """
        return self._commit_hash

    @commit_hash.setter
    def commit_hash(self, commit_hash):
        """Sets the commit_hash of this SubmissionDto.


        :param commit_hash: The commit_hash of this SubmissionDto.  # noqa: E501
        :type: str
        """

        self._commit_hash = commit_hash

    @property
    def commit_message(self):
        """Gets the commit_message of this SubmissionDto.  # noqa: E501


        :return: The commit_message of this SubmissionDto.  # noqa: E501
        :rtype: str
        """
        return self._commit_message

    @commit_message.setter
    def commit_message(self, commit_message):
        """Sets the commit_message of this SubmissionDto.


        :param commit_message: The commit_message of this SubmissionDto.  # noqa: E501
        :type: str
        """

        self._commit_message = commit_message

    @property
    def branch_name(self):
        """Gets the branch_name of this SubmissionDto.  # noqa: E501


        :return: The branch_name of this SubmissionDto.  # noqa: E501
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """Sets the branch_name of this SubmissionDto.


        :param branch_name: The branch_name of this SubmissionDto.  # noqa: E501
        :type: str
        """

        self._branch_name = branch_name

    @property
    def status(self):
        """Gets the status of this SubmissionDto.  # noqa: E501


        :return: The status of this SubmissionDto.  # noqa: E501
        :rtype: SubmissionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubmissionDto.


        :param status: The status of this SubmissionDto.  # noqa: E501
        :type: SubmissionStatus
        """

        self._status = status

    @property
    def build_log_key(self):
        """Gets the build_log_key of this SubmissionDto.  # noqa: E501


        :return: The build_log_key of this SubmissionDto.  # noqa: E501
        :rtype: str
        """
        return self._build_log_key

    @build_log_key.setter
    def build_log_key(self, build_log_key):
        """Sets the build_log_key of this SubmissionDto.


        :param build_log_key: The build_log_key of this SubmissionDto.  # noqa: E501
        :type: str
        """

        self._build_log_key = build_log_key

    @property
    def test_log_key(self):
        """Gets the test_log_key of this SubmissionDto.  # noqa: E501


        :return: The test_log_key of this SubmissionDto.  # noqa: E501
        :rtype: str
        """
        return self._test_log_key

    @test_log_key.setter
    def test_log_key(self, test_log_key):
        """Sets the test_log_key of this SubmissionDto.


        :param test_log_key: The test_log_key of this SubmissionDto.  # noqa: E501
        :type: str
        """

        self._test_log_key = test_log_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmissionDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubmissionDto):
            return True

        return self.to_dict() != other.to_dict()
